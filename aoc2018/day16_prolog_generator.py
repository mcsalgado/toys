import fileinput
from inspect import isfunction

import day16_instructions

instructions = {k: v
                for k, v in day16_instructions.__dict__.items()
                if isfunction(v)}

lines = iter(line.strip() for line in fileinput.input())

samples = []
while True:
    next_lines = next(lines)
    if next_lines == '':
        break

    _, before = next_lines.split(': ')
    before = tuple(map(int, before[1:-1].split(', ')))

    instruction_statement = tuple(map(int, next(lines).split()))

    _, after = next(lines).split(': ')
    after = after.strip()
    after = tuple(map(int, after[1:-1].split(', ')))

    samples.append((instruction_statement, before, after))

    assert next(lines) == ''

behaves_like = {(instruction, opcode)
                for (opcode, a, b, c), before, after in samples
                for instruction, instruction_fn in instructions.items()
                if instruction_fn(before, a, b, c) == after}

# NOTE(mcsalgado): generates the prolog code to solve the CSP
print(f'% NOTE(mcsalgado): this was generated by {__file__}.\n')
print(':- use_module(library(clpfd)).\n')

for instruction, opcode in behaves_like:
    print(f'behaves_like({instruction}, {opcode}).')

print(f'''
solve(Opcodes) :-
    Instructions = [{', '.join(instructions.keys())}],
    same_length(Instructions, Opcodes),
    all_different(Opcodes),
    maplist(behaves_like, Instructions, Opcodes).''')
